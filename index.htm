<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Smart DTMS & LP Dashboard</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
  <style>
    /* (All styles same as your original — trimmed here for brevity) */
    *{box-sizing:border-box;margin:0;padding:0}
    body{font-family:'Roboto',sans-serif;background:#f4f7f8;color:#333;line-height:1.6}
    header{text-align:center;padding:2rem;background:linear-gradient(135deg,#4a90e2,#50e3c2);color:#fff;box-shadow:0 4px 12px rgba(0,0,0,0.1)}
    header h1{margin:0;font-size:2.2rem}
    header p{margin:.5rem 0 0;font-weight:400;font-size:1.1rem}
    main{padding:2rem;max-width:1400px;margin:0 auto}
    .dashboard-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:1.5rem;flex-wrap:wrap;gap:1rem}
    .last-update{font-size:.9rem;color:#666;background:#fff;padding:.5rem 1rem;border-radius:20px;box-shadow:0 2px 4px rgba(0,0,0,0.05)}
    .status-cards{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:1.5rem;margin-bottom:2.5rem}
    .card{background:white;padding:1.5rem;border-radius:12px;box-shadow:0 4px 12px rgba(0,0,0,0.08);text-align:center;transition:transform .3s ease,box-shadow .3s ease;position:relative;overflow:hidden}
    .card:hover{transform:translateY(-5px);box-shadow:0 8px 16px rgba(0,0,0,0.12)}
    .card.safety-active{box-shadow:0 0 0 3px #FF9800}
    .card.safety-active::before{content:"SAFETY ACTIVE";position:absolute;top:0;right:0;background:#FF9800;color:white;font-size:.7rem;padding:.2rem .5rem;border-bottom-left-radius:8px}
    .card h2{margin:0 0 1rem;font-size:1.2rem;color:#4a90e2}
    .card p{margin:0;font-size:1.4rem;font-weight:500}
    .status-indicator{display:inline-block;width:14px;height:14px;border-radius:50%;margin-right:8px}
    .status-on{background-color:#4CAF50;box-shadow:0 0 8px rgba(76,175,80,.6)}
    .status-off{background-color:#F44336;box-shadow:0 0 8px rgba(244,67,54,.6)}
    .status-warning{background-color:#FF9800;box-shadow:0 0 8px rgba(255,152,0,.6)}
    .status-normal{background-color:#4CAF50;box-shadow:0 0 8px rgba(76,175,80,.6)}
    .events-section{background:white;padding:1.5rem;border-radius:12px;box-shadow:0 4px 12px rgba(0,0,0,0.08)}
    .events-section h2{margin:0 0 1.5rem;color:#4a90e2;font-size:1.5rem;padding-bottom:.5rem;border-bottom:2px solid #f0f0f0}
    .events-table{overflow-x:auto;border-radius:8px}
    .events-table table{width:100%;border-collapse:collapse;background:white}
    .events-table th,.events-table td{padding:1rem;text-align:center;border-bottom:1px solid #eee}
    .events-table th{background:#4a90e2;color:white;position:sticky;top:0;font-weight:500}
    .events-table tbody tr:nth-child(even){background:#f9f9f9}
    .events-table tbody tr:hover{background:#f1f7ff}
    .safety-status{background:#FFF3E0;padding:1rem;border-radius:8px;margin-bottom:1.5rem;display:flex;align-items:center;justify-content:space-between}
    .safety-status.warning{background:#FFECB3;border-left:4px solid #FFC107}
    .safety-status.danger{background:#FFCDD2;border-left:4px solid #F44336}
    .safety-status .icon{font-size:1.5rem;margin-right:1rem}
    footer{text-align:center;padding:1.5rem;background:#4a90e2;color:white;margin-top:3rem}
    .loading{display:inline-block;width:20px;height:20px;border:3px solid rgba(255,255,255,.3);border-radius:50%;border-top-color:#fff;animation:spin 1s ease-in-out infinite}
    @keyframes spin{to{transform:rotate(360deg)}}
    .connection-status{display:flex;align-items:center;justify-content:center;margin-top:1rem;font-size:.9rem}
    .connection-dot{width:10px;height:10px;border-radius:50%;margin-right:8px}
    .connected{background-color:#4CAF50}
    .disconnected{background-color:#F44336}
    @media (max-width:768px){.status-cards{grid-template-columns:repeat(auto-fit,minmax(150px,1fr))}.events-table th,.events-table td{padding:.7rem;font-size:.9rem}.dashboard-header{flex-direction:column;align-items:flex-start;gap:.5rem}.safety-status{flex-direction:column;text-align:center;gap:.5rem}}
    .event-row.safety-event{background-color:#FFF9C4 !important}
    .event-row.safety-event:hover{background-color:#FFF59D !important}
  </style>
</head>
<body>
  <header>
    <h1>Smart DTMS & LP Dashboard</h1>
    <p>Real-Time Monitoring of CONTACTOR, RFID BASED LOTO, Noise & Lightning PROTECTION</p>
  </header>

  <main>
    <div class="dashboard-header">
      <h2>System Status</h2>
      <div class="last-update">Last update: <span id="updateTime">-</span></div>
    </div>

    <div id="safetyStatus" class="safety-status" style="display:none;">
      <div style="display:flex;align-items:center;">
        <div class="icon">⚠️</div>
        <div>
          <strong id="safetyTitle">Safety Mode Active</strong>
          <div id="safetyMessage">Contactors have been turned off for safety reasons</div>
        </div>
      </div>
      <div id="safetyTimer">Auto-reset in: <span id="safetyCountdown">--:--</span></div>
    </div>

    <section class="status-cards">
      <div class="card" id="relay1Card">
        <h2>Primary Contactor</h2>
        <p id="relay1State"><span class="status-indicator status-off"></span>Loading...</p>
      </div>
      <div class="card" id="relay2Card">
        <h2>Secondary Contactor</h2>
        <p id="relay2State"><span class="status-indicator status-off"></span>Loading...</p>
      </div>
      <div class="card" id="lockCard">
        <h2>Lock Relay</h2>
        <p id="lockState"><span class="status-indicator status-off"></span>Loading...</p>
      </div>
      <div class="card" id="noiseCard">
        <h2>Noise Level</h2>
        <p id="noiseLevel"><span class="status-indicator status-normal"></span>Loading...</p>
      </div>
      <div class="card" id="lightningCard">
        <h2>Lightning</h2>
        <p id="lightningState"><span class="status-indicator status-off"></span>Loading...</p>
      </div>
    </section>

    <section class="events-section">
      <h2>Event Logs</h2>
      <div class="events-table">
        <table>
          <thead>
            <tr>
              <th>Timestamp</th>
              <th>RFID Tag</th>
              <th>Tag Name</th>
              <th>Action</th>
              <th>Primary Contactor</th>
              <th>Secondary Contactor</th>
              <th>Lock Relay</th>
              <th>Noise</th>
              <th>Lightning</th>
              <th>Lightning Dist (km)</th>
            </tr>
          </thead>
          <tbody id="eventsBody">
            <tr><td colspan="10"><span class="loading"></span> Loading events...</td></tr>
          </tbody>
        </table>
      </div>
    </section>

    <div class="connection-status">
      <span class="connection-dot connected" id="connectionDot"></span>
      <span id="connectionStatus">Connected to Firebase</span>
    </div>
  </main>

  <footer>
    <p>© 2025 SPS PROJECT HUB | Smart DTMS & Lightning Protection System</p>
  </footer>

  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/12.2.1/firebase-app.js";
    import { getDatabase, ref, onValue } from "https://www.gstatic.com/firebasejs/12.2.1/firebase-database.js";

    // NEW Firebase configuration (user supplied)
    const firebaseConfig = {
      apiKey: "AIzaSyBeaBgSirnRiVAk0z0H9MCmlkdpQPGEnlU",
      authDomain: "dtms-c85d3.firebaseapp.com",
      databaseURL: "https://dtms-c85d3-default-rtdb.asia-southeast1.firebasedatabase.app",
      projectId: "dtms-c85d3",
      storageBucket: "dtms-c85d3.firebasestorage.app",
      messagingSenderId: "135592708691",
      appId: "1:135592708691:web:fa791bb6c240ce7afe14a6"
    };

    const app = initializeApp(firebaseConfig);
    const db = getDatabase(app);
    const eventsRef = ref(db, 'events');

    // Local UI state
    let safetyInterval = null;
    let safetyEndTime = 0;

    // Helper to update indicator color classes
    function updateStatusIndicator(elementId, value) {
      const element = document.getElementById(elementId);
      const indicator = element.querySelector('.status-indicator');

      if (!indicator) return;

      if (value === 'ON' || value === 'YES') {
        indicator.className = 'status-indicator status-on';
      } else if (value === 'OFF' || value === 'NO') {
        indicator.className = 'status-indicator status-off';
      } else if (!isNaN(value)) {
        const numValue = parseInt(value);
        if (numValue >= 4) {
          indicator.className = 'status-indicator status-warning';
        } else {
          indicator.className = 'status-indicator status-normal';
        }
      } else {
        indicator.className = 'status-indicator status-off';
      }
    }

    function formatTimestamp(timestamp) {
      if (!timestamp) return 'N/A';
      const adjustedTimestamp = timestamp < 10000000000 ? timestamp * 1000 : timestamp;
      const date = new Date(adjustedTimestamp);
      if (isNaN(date.getTime())) return 'Invalid Date';
      return date.toLocaleString();
    }

    function updateLastUpdateTime() {
      const now = new Date();
      document.getElementById('updateTime').textContent = now.toLocaleTimeString();
    }

    function updateSafetyStatus(active, reason = "", endTime = 0) {
      const safetyElement = document.getElementById('safetyStatus');
      const relay1Card = document.getElementById('relay1Card');
      const relay2Card = document.getElementById('relay2Card');
      const lockCard   = document.getElementById('lockCard');

      if (active) {
        safetyElement.style.display = 'flex';
        safetyElement.className = reason === 'lightning' ? 'safety-status danger' : 'safety-status warning';
        document.getElementById('safetyTitle').textContent = reason === 'lightning' ? 'Lightning Detected!' : 'High Noise Level!';
        document.getElementById('safetyMessage').textContent = 'All relays have been turned off for safety';

        relay1Card.classList.add('safety-active');
        relay2Card.classList.add('safety-active');
        lockCard.classList.add('safety-active');

        if (endTime > 0) {
          safetyEndTime = endTime;
          if (safetyInterval) clearInterval(safetyInterval);
          safetyInterval = setInterval(updateSafetyCountdown, 1000);
          updateSafetyCountdown();
        }
      } else {
        safetyElement.style.display = 'none';
        relay1Card.classList.remove('safety-active');
        relay2Card.classList.remove('safety-active');
        lockCard.classList.remove('safety-active');
        if (safetyInterval) { clearInterval(safetyInterval); safetyInterval = null; }
      }
    }

    function updateSafetyCountdown() {
      if (safetyEndTime > 0) {
        const now = Date.now();
        const remaining = Math.max(0, safetyEndTime - now);
        const seconds = Math.floor(remaining / 1000);
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        document.getElementById('safetyCountdown').textContent =
          `${minutes.toString().padStart(2,'0')}:${remainingSeconds.toString().padStart(2,'0')}`;
        if (remaining <= 0) {
          updateSafetyStatus(false);
        }
      }
    }

    onValue(eventsRef, (snapshot) => {
      const data = snapshot.val();
      const eventsBody = document.getElementById('eventsBody');
      eventsBody.innerHTML = '';

      if (!data) {
        eventsBody.innerHTML = '<tr><td colspan="10">No events yet.</td></tr>';
        return;
      }

      const keys = Object.keys(data);
      keys.sort((a,b) => data[b].timestamp - data[a].timestamp);

      // latest event
      const latestEvent = data[keys[0]];
      const noiseLevel = parseInt(latestEvent.noise_floor) || 0;
      const isLightning = latestEvent.lightning === 'YES';
      const isNoiseWarning = noiseLevel >= 4;
      const isSafetyEvent = (latestEvent.action && (latestEvent.action.includes('Noise warning') || latestEvent.action.includes('Lightning detected')));

      let actualRelay1 = latestEvent.relay1;
      let actualRelay2 = latestEvent.relay2;
      let actualLockRelay = latestEvent.lock_relay;

      if (isSafetyEvent) {
        actualRelay1 = 'OFF';
        actualRelay2 = 'OFF';
        actualLockRelay = 'OFF';
        const eventTime = latestEvent.timestamp < 10000000000 ? latestEvent.timestamp * 1000 : latestEvent.timestamp;
        const safetyEnd = eventTime + 5000;
        updateSafetyStatus(true, isLightning ? 'lightning' : 'noise', safetyEnd);
      } else if (latestEvent.action && latestEvent.action.includes('Noise normalized')) {
        updateSafetyStatus(false);
      } else {
        updateSafetyStatus(false);
      }

      document.getElementById('relay1State').innerHTML = `<span class="status-indicator"></span>${actualRelay1 || 'N/A'}`;
      document.getElementById('relay2State').innerHTML = `<span class="status-indicator"></span>${actualRelay2 || 'N/A'}`;
      document.getElementById('lockState').innerHTML   = `<span class="status-indicator"></span>${actualLockRelay || 'N/A'}`;
      document.getElementById('noiseLevel').innerHTML  = `<span class="status-indicator"></span>${latestEvent.noise_floor || 'N/A'}`;
      document.getElementById('lightningState').innerHTML = `<span class="status-indicator"></span>${latestEvent.lightning || 'N/A'}`;

      updateStatusIndicator('relay1State', actualRelay1);
      updateStatusIndicator('relay2State', actualRelay2);
      updateStatusIndicator('lockState', actualLockRelay);
      updateStatusIndicator('noiseLevel', latestEvent.noise_floor);
      updateStatusIndicator('lightningState', latestEvent.lightning);

      // Display all events
      keys.forEach(key => {
        const event = data[key];
        const formattedDate = formatTimestamp(event.timestamp);

        let isSafetyRow = false;
        if (event.action) {
          isSafetyRow = event.action.includes('Noise warning') || event.action.includes('Lightning detected') || event.action.includes('Noise normalized');
        }

        let displayRelay1 = event.relay1;
        let displayRelay2 = event.relay2;
        let displayLockRelay = event.lock_relay;

        if (isSafetyRow && (event.action.includes('Noise warning') || event.action.includes('Lightning detected'))) {
          displayRelay1 = 'OFF';
          displayRelay2 = 'OFF';
          displayLockRelay = 'OFF';
        }

        const tr = document.createElement('tr');
        if (isSafetyRow) tr.classList.add('event-row','safety-event');

        const lightningDist = event.hasOwnProperty('lightning_distance_km') && event.lightning_distance_km !== null ? event.lightning_distance_km : 'N/A';
        const tagName = event.tag_name || 'N/A';

        tr.innerHTML = `
          <td>${formattedDate}</td>
          <td>${event.last_rfid_tag || 'N/A'}</td>
          <td>${tagName}</td>
          <td>${event.action || 'N/A'}</td>
          <td>${displayRelay1 || 'N/A'}</td>
          <td>${displayRelay2 || 'N/A'}</td>
          <td>${displayLockRelay || 'N/A'}</td>
          <td>${event.noise_floor || 'N/A'}</td>
          <td>${event.lightning || 'N/A'}</td>
          <td>${lightningDist}</td>
        `;
        eventsBody.appendChild(tr);
      });

      updateLastUpdateTime();
      document.getElementById('connectionDot').className = 'connection-dot connected';
      document.getElementById('connectionStatus').textContent = 'Connected to Firebase';
    }, (error) => {
      console.error("Firebase error:", error);
      document.getElementById('eventsBody').innerHTML = '<tr><td colspan="10">Error loading data. Check console.</td></tr>';
      document.getElementById('connectionDot').className = 'connection-dot disconnected';
      document.getElementById('connectionStatus').textContent = 'Disconnected from Firebase';
    });

    setInterval(updateLastUpdateTime, 60000);
  </script>
</body>
</html>
